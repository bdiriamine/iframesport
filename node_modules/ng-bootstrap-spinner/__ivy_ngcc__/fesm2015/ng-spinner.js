import { Component, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = function (a0, a1) { return [a0, a1]; };
const _c1 = function (a0, a1) { return { "width": a0, "height": a1 }; };
class NgSpinnerComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NgSpinnerComponent.ɵfac = function NgSpinnerComponent_Factory(t) { return new (t || NgSpinnerComponent)(); };
NgSpinnerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgSpinnerComponent, selectors: [["ng-spinner"]], inputs: { type: "type", size: "size", color: "color" }, decls: 3, vars: 8, consts: [["role", "status", 3, "ngClass", "ngStyle"], [1, "sr-only"]], template: function NgSpinnerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵtext(2, "Loading...");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c0, "text-" + ctx.color, "spinner-" + ctx.type))("ngStyle", ɵngcc0.ɵɵpureFunction2(5, _c1, ctx.size + "rem", ctx.size + "rem"));
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle], styles: [""] });
/** @nocollapse */
NgSpinnerComponent.ctorParameters = () => [];
NgSpinnerComponent.propDecorators = {
    type: [{ type: Input }],
    size: [{ type: Input }],
    color: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgSpinnerComponent, [{
        type: Component,
        args: [{
                selector: 'ng-spinner',
                template: "<div [ngClass]=\"['text-' + this.color,'spinner-' + this.type]\" [ngStyle]=\"{'width': size+'rem','height':size+'rem'}\"\r\n  role=\"status\">\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n",
                styles: [""]
            }]
    }], function () { return []; }, { type: [{
            type: Input
        }], size: [{
            type: Input
        }], color: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    NgSpinnerComponent.prototype.type;
    /** @type {?} */
    NgSpinnerComponent.prototype.size;
    /** @type {?} */
    NgSpinnerComponent.prototype.color;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgSpinnerModule {
}
NgSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgSpinnerModule });
NgSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgSpinnerModule_Factory(t) { return new (t || NgSpinnerModule)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSpinnerModule, { declarations: function () { return [NgSpinnerComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgSpinnerComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgSpinnerModule, [{
        type: NgModule,
        args: [{
                declarations: [NgSpinnerComponent],
                imports: [
                    CommonModule
                ],
                exports: [NgSpinnerComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgSpinnerComponent, NgSpinnerModule };

//# sourceMappingURL=ng-spinner.js.map